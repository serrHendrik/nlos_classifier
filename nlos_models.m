classdef nlos_models
    %NLOS_MODELS Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        
    end
    
    methods(Static)
        function learner = classification_tree(predictors, response)
            fprintf('Training classication tree... ');
            
            % Train
            learner = fitctree(...
                predictors, ...
                response, ...
                'SplitCriterion', 'gdi', ...
                'MaxNumSplits', 200, ...
                'Surrogate', 'off', ...
                'ClassNames', [0; 1], ...
                'KFold', 10);
            
            fprintf('done!\n');
            
        end
        
        function learner = discriminant_linear(predictors, response)
           fprintf('Training linear discriminant analysis model... ');
            
            learner = fitcdiscr(...
                predictors, ...
                response, ...
                'DiscrimType', 'linear', ...
                'Gamma', 0, ...
                'FillCoeffs', 'off', ...
                'ClassNames', [0; 1], ...
                'KFold', 10);    
            
            fprintf('done!\n');

        end
        
        function learner = discriminant_quadratic(predictors, response)
           fprintf('Training linear discriminant analysis model... ');
            
            learner = fitcdiscr(...
                predictors, ...
                response, ...
                'DiscrimType', 'quadratic', ...
                'FillCoeffs', 'off', ...
                'ClassNames', [0; 1], ...
                'KFold', 10);    
            
            fprintf('done!\n');

        end
        
        function learner = knn_euclidean(predictors, response)
            fprintf('Training KNN something model... ');
            
            learner = fitcknn(...
                predictors, ...
                response, ...
                'Distance', 'Euclidean', ...
                'Exponent', [], ...
                'NumNeighbors', 10, ...
                'DistanceWeight', 'Equal', ...
                'Standardize', true, ...
                'ClassNames', [0; 1], ...
                'KFold', 10); 
            
            fprintf('done!\n');
            
        end
        
        function learner = knn_euclidean_SIweight(predictors, response)
            fprintf('Training KNN something model... ');
            
            learner = fitcknn(...
                predictors, ...
                response, ...
                'Distance', 'Euclidean', ...
                'Exponent', [], ...
                'NumNeighbors', 10, ...
                'DistanceWeight', 'SquaredInverse', ...
                'Standardize', true, ...
                'ClassNames', [0; 1], ...
                'KFold', 10); 
            
            fprintf('done!\n');
            
         end
        
        function learner = knn_minkowski(predictors, response)
            fprintf('Training KNN something model... ');
            
            learner = fitcknn(...
                predictors, ...
                response, ...
                'Distance', 'Minkowski', ...
                'Exponent', 3, ...
                'NumNeighbors', 10, ...
                'DistanceWeight', 'Equal', ...
                'Standardize', true, ...
                'ClassNames', [0; 1], ...
                'KFold', 10);
            
            fprintf('done!\n');
            
        end       
        
        function learner = svm_linear(predictors, response)
            fprintf('Training linear SVM model... ');
            
            learner = fitcsvm(...
               predictors, ...
               response, ...
               'ClassNames',[0; 1], ...
               'Standardize', true, ...
               'KernelFunction','linear', ...
               'KFold', 10);
                
            fprintf('done!\n');
        end
        
    end
end

